diff -rNu pwlib.orig/include/ptlib/unix/ptlib/videoio.h pwlib/include/ptlib/unix/ptlib/videoio.h
--- pwlib.orig/include/ptlib/unix/ptlib/videoio.h	Wed Jan 16 04:36:51 2002
+++ pwlib/include/ptlib/unix/ptlib/videoio.h	Thu Mar  7 17:37:27 2002
@@ -142,6 +142,12 @@
     virtual BOOL GetParameters (int *whiteness, int *brightness, 
 				int *colour, int *contrast, int *hue);
 
+    /** Set VideoFormat and VideoChannel in one ioctl
+     */
+    virtual BOOL SetVideoDeviceParameters (int channelNumber, 
+					   VideoFormat videoFormat);
+
+
   protected:
     void ClearMapping();
 
diff -rNu pwlib.orig/include/ptlib/videoio.h pwlib/include/ptlib/videoio.h
--- pwlib.orig/include/ptlib/videoio.h	Wed Jan 16 08:51:06 2002
+++ pwlib/include/ptlib/videoio.h	Thu Mar  7 17:37:27 2002
@@ -431,6 +431,14 @@
       int *hue
     );
 
+    
+    /** Set VideoFormat and VideoChannel in one ioctl
+     */
+    virtual BOOL SetVideoDeviceParameters (
+      int channelNumber, 
+      VideoFormat videoFormat
+    );
+
 
     /**Get the video conversion vertical flip state.
        Default action is to return FALSE.
diff -rNu pwlib.orig/src/ptlib/common/videoio.cxx pwlib/src/ptlib/common/videoio.cxx
--- pwlib.orig/src/ptlib/common/videoio.cxx	Thu Jan 17 21:20:46 2002
+++ pwlib/src/ptlib/common/videoio.cxx	Thu Mar  7 17:37:27 2002
@@ -595,6 +595,15 @@
   return TRUE;
 }
 
+BOOL PVideoDevice::SetVideoDeviceParameters (int newNumber, VideoFormat newFormat) 
+{
+  BOOL err1, err2;
+
+  err1 = SetChannel (newNumber);
+  err2 = SetVideoFormat (newFormat);
+  
+  return (err1 && err2);
+}
 
 BOOL PVideoDevice::GetVFlipState()
 {
diff -rNu pwlib.orig/src/ptlib/unix/dummyvideo.cxx pwlib/src/ptlib/unix/dummyvideo.cxx
--- pwlib.orig/src/ptlib/unix/dummyvideo.cxx	Mon Jan 14 12:52:44 2002
+++ pwlib/src/ptlib/unix/dummyvideo.cxx	Thu Mar  7 17:37:27 2002
@@ -219,6 +219,10 @@
 	return TRUE;
 }
 
+BOOL PVideoInputDevice::SetVideoDeviceParameters (int newNumber, VideoFormat newFormat) 
+{
+  return TRUE;
+}
 
 BOOL PVideoInputDevice::TestAllFormats()
 {
diff -rNu pwlib.orig/src/ptlib/unix/video4bsd.cxx pwlib/src/ptlib/unix/video4bsd.cxx
--- pwlib.orig/src/ptlib/unix/video4bsd.cxx	Tue Jan  8 18:16:13 2002
+++ pwlib/src/ptlib/unix/video4bsd.cxx	Thu Mar  7 17:37:27 2002
@@ -540,6 +540,16 @@
   return TRUE;
 }
 
+BOOL PVideoInputDevice::SetVideoDeviceParameters (int newNumber, VideoFormat newFormat) 
+{
+  BOOL err1, err2;
+
+  err1 = SetVideoChannel (newNumber);
+  err2 = SetVideoFormat (newFormat);
+  
+  return (err1 && err2);
+}
+
 BOOL PVideoInputDevice::TestAllFormats()
 {
   return TRUE;
diff -rNu pwlib.orig/src/ptlib/unix/video4linux.cxx pwlib/src/ptlib/unix/video4linux.cxx
--- pwlib.orig/src/ptlib/unix/video4linux.cxx	Sun Jan 27 00:58:15 2002
+++ pwlib/src/ptlib/unix/video4linux.cxx	Thu Mar  7 17:40:02 2002
@@ -201,6 +201,15 @@
     VIDEO_PALETTE_YUV420P 
   },
 
+  /** Creative VideoBlaster Webcam II USB
+   */
+  {"CPiA Camera",
+   "CPIA which works with cpia and cpia_usb driver modules",
+   HINT_ONLY_WORKS_PREF_PALETTE   |
+   HINT_HAS_PREF_PALETTE,
+   VIDEO_PALETTE_YUV422
+  },
+
   /** Default device with no special settings
    */
   { "",
@@ -288,27 +297,6 @@
   frameHeight = videoCapability.maxheight;
   frameWidth  = videoCapability.maxwidth;
   
-  // select the specified input and video format
-  if (!SetChannel(channelNumber))  
-    goto errorOpenVideoInputDevice;
-  
-  if (!SetVideoFormat(videoFormat)) 
-    goto errorOpenVideoInputDevice;
-
-  if (GetBrightness() < 0) 
-    goto errorOpenVideoInputDevice;
-
-  if (GetWhiteness() < 0) 
-    goto errorOpenVideoInputDevice;
-
-  if (GetColour() < 0) 
-    goto errorOpenVideoInputDevice;
-
-  if (GetContrast() < 0)
-    goto errorOpenVideoInputDevice;
-
-  if (GetHue() < 0)
-    goto errorOpenVideoInputDevice;
 
   // Init audio
   struct video_audio videoAudio;
@@ -317,12 +305,8 @@
     videoAudio.flags &= ~VIDEO_AUDIO_MUTE;
     videoAudio.mode = VIDEO_SOUND_MONO;
     ::ioctl(videoFd, VIDIOCSAUDIO, &videoAudio);
-    } return TRUE;
-
- errorOpenVideoInputDevice:
-    ::close (videoFd);
-    videoFd = -1;
-    return FALSE;
+    } 
+  return TRUE;
 }
 
 
@@ -452,7 +436,11 @@
 
 int PVideoInputDevice::GetNumChannels() 
 {
-  return videoCapability.channels;
+  /* If Opened, return the capability value, else 1 as in videoio.cxx */
+  if (IsOpen ())
+    return videoCapability.channels;
+  else
+    return 1;
 }
 
 
@@ -481,6 +469,47 @@
   return TRUE;
 }
 
+
+BOOL PVideoInputDevice::SetVideoDeviceParameters (int newNumber, VideoFormat videoFormat) 
+{
+  if (!PVideoDevice::SetChannel(newNumber))
+    return FALSE;
+
+  if (!PVideoDevice::SetVideoFormat(videoFormat)) {
+    PTRACE(1,"PVideoDevice::SetVideoFormat\t failed for format "<<videoFormat);
+    return FALSE;
+  }
+
+  static int fmt[4] = { VIDEO_MODE_PAL, VIDEO_MODE_NTSC, 
+                          VIDEO_MODE_SECAM, VIDEO_MODE_AUTO };
+
+  // select the specified input and video format
+  // get channel information (to check if channel is valid)
+  struct video_channel channel;
+  channel.channel = channelNumber;
+  if (::ioctl(videoFd, VIDIOCGCHAN, &channel) < 0) {
+    PTRACE(1,"VideoInputDevice Get Channel info failed : "<< ::strerror(errno));    
+
+
+
+    return FALSE;
+  }
+  
+  // set channel information
+  channel.norm = fmt[videoFormat];
+  channel.channel = channelNumber;
+
+  // set the information
+  if (::ioctl(videoFd, VIDIOCSCHAN, &channel) < 0) {
+    PTRACE(1,"VideoInputDevice SetChannel failed : "<< ::strerror(errno));  
+
+
+
+    return FALSE;
+  }
+
+  return TRUE;
+}
 
 BOOL PVideoInputDevice::SetColourFormat(const PString & newFormat)
 {







